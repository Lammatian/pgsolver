#!/usr/bin/env python3

import subprocess
import sys

gametypes = ["random", "sparse", "steady"]
solvers = ["spm", "sp", "re", "si"]

def print_usage():
    print("Usage: eval [solver] [number] [size] [timeout] [folder]")

def parse_args():
    if len(sys.argv) < 6:
        print_usage()
        exit(1)

    solver = sys.argv[1]

    if not solver in solvers:
        print("Unrecognised solver")
        print_usage()
        exit(1)

    try:
        games_count = int(sys.argv[2])
    except:
        print_usage()
        exit(1)

    try:
        size = int(sys.argv[3])
    except:
        print_usage()
        exit(1)

    try:
        timeout = int(sys.argv[4])
    except:
        print_usage()
        exit(1)

    folder = sys.argv[5]

    return (solver, games_count, size, timeout, folder)

def evaluate(solver, games_count, size, timeout, folder):
    stats = {}

    for gametype in gametypes:
        stats[gametype] = []

    for gametype in gametypes:
        for i in range(1, games_count+1):
            try:
                gamename = gametype + "_" + str(size) + "_" + str(i) + ".gm"
                gamepath = folder + "/" + gamename
                cmd = ["../bin/benchmark", "-gp", "-" + solver, "''", gamepath, "-t", "1"]
                out = subprocess.check_output(cmd, timeout=timeout).decode("utf-8")
                stats[gametype].append(time)
            except subprocess.TimeoutExpired:
                stats[gametype].append('timeout')
            except subprocess.CalledProcessError as exc:
                print("Something went wrong, rc: ", exc.returncode, "output: ", exc.output)
                exit(1)
    
    return stats

def save_stats(solver, stats, size, folder):
    for gametype in gametypes:
        filename = solver + "_" + gametype + "_" + str(size) + "_stat.txt"

        with open(folder + "/" + filename, "w") as f:
            for result in solver[gametype]:
                f.write(str(result) + "\n")

def main():
    solver, number, size, timeout, folder = parse_args()

    print("Evaluating solver", solver, "for", number, "games of size", size)
    stats = evaluate(solver, number, size, timeout, folder)

    print("Done. Saving data")
    save_stats(solver, stats, size, folder)
    print("Done")

if __name__ == "__main__":
    main()
