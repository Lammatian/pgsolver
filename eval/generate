#!/usr/bin/env python3

import subprocess
import sys

gametypes = ["random", "sparse", "steady"]

def print_usage():
    print("generate [name] [number] [size] [folder]")

def parse_args():
    if len(sys.argv) < 5:
        print_usage()
        exit(1)

    if not sys.argv[1] in gametypes and sys.argv[1] != "all":
        print("Wrong game type")
        print_usage()
        exit(1)
    else:
        gametype = sys.argv[1]

    try:
        number = int(sys.argv[2])
    except:
        print_usage()
        print("number of games should be an integer")
        exit(1)

    try:
        size = int(sys.argv[3])
    except:
        print_usage()
        print("size should be an integer")
        exit(1)

    folder = sys.argv[4]

    return (gametype, number, size, folder)

# generate the game and save to file in specific folder
def generate(gametype, size, idx, folder):
    if gametype == "random":
        cmd = "../bin/randomgame "
        cmd += str(size) + " "
        cmd += str(size) + " "
        cmd += "1 "
        cmd += str(size)
    elif gametype == "sparse":
        cmd = "../bin/randomgame "
        cmd += str(size) + " "
        cmd += str(size) + " "
        cmd += "2 5"
    else:
        cmd = "../bin/steadygame "
        cmd += str(size) + " "
        cmd += "1 5 1 5"

    filename = gametype + "_" + str(size) + "_" + str(idx) + ".gm"
    f = open(folder + "/" + filename, "w")

    p = subprocess.call(cmd, shell=True, stdout=f)
    return p


def main():
    gametype, number, size, folder = parse_args()
    print("Generating", number, "games of type", gametype, "and size", size)

    for i in range(1, number+1):
        if gametype == "all":
            for gt in gametypes:
                rc = generate(gt, size, i, folder)
                if rc != 0:
                    print("error")
                    exit(1)
        else:
            rc = generate(gametype, size, i, folder) 
            if rc != 0:
                print("error")
                exit(1)
    
    print("Done")

if __name__ == "__main__":
    main()
